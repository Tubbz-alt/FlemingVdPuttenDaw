exp(-1.38)
exp(0.1)
log(0.1)
exp(2)
exp(-2)
exp(3)
exp(-3)
quit()
source('~/Dropbox/Research/Metacognition/BN_model/selfSelf/model development/prePostCov.R')
help(factanal)
help(polycor)
install.packages(polycor)
install.packages(polycov)
install.packages("polycor")
require("polycor")
help(hetcor)
help(data.frame)
help(rand)
help(randn)
help()
replicate(10, rnorm(20))
dat = data.frame(replicate(10, rnorm(20)))
dat
help(factanal)
help(hetcor)
covmat
covmat = hetcor(dat)
covmat
help(factanal)
factanal(dat)
factanal(dat, factors=20, covmat=covmat, rotation="oblimin")
covmat
help(hetcor)
covmat$correlations
help(cov2cor)
factanal(dat, factors=20, covmat=covmat$correlations, rotation="oblimin")
factanal(dat, factors=20, rotation="oblimin")
factanal(dat, factors=20)
dat
factanal(dat, factors=20)
require(shinystan)
require(rstan)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/accweighted/fitObject_group3.RData")
print(meta_fit)
launch_shinystan(meta_fit)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/accweighted/fitObject_group3.RData")
launch_shinystan(meta_fit)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/accweighted/fitObject_group2.RData")
launch_shinystan(meta_fit)
quit()
quit()
install.packages("Rcpp", type = "source")
quit()
require(rstan)
devtools::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
rm(list=ls())
quit()
remove.packages("rstan")
devtools::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
install.packages("devtools")
devtools::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan")
quit
quit()
quit()
source('~/Dropbox/Utils/stan/stanUtilities.R')
install.packages("coda")
source('~/Dropbox/Utils/stan/stanUtilities.R')
quit()
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/ideal/fitObject_group3.RData")
require(rstan)
require(shinystan)
launch_shinystan(meta_fit)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/mapping/fitObject_group3.RData")
launch_shinystan(meta_fit)
rm(list=ls())
require(rstan)
baseDir = "~/Dropbox/Research/Metacognition/stateactionexpt/analysis/stan/modelfits_alt/"
models = c('ideal', 'weighted', 'accweighted', 'mapping', 'weightedmapping', 'accweightedmapping') # selection from: ideal, weighted, accweighted, mapping, weightedmapping, accweightedmapping
# Loop over and load models, write out variance parameters
sumrhats = NA
rhat <- matrix(list(), 1, 12)
j = 1
d = 2
for (m in 1:length(models)) {
if (d == 1) {
dataset = 2
} else {
dataset = 3
}
outputPath <- paste(baseDir, models[m], "/", sep="")
# Load fitted model
load(paste(outputPath, "fitObject_group", dataset, ".RData", sep=""))
# Load vector of fitted subject IDs
subjects = read.csv(paste(outputPath, "subParams_subjects_dataset", dataset, ".csv",sep=""))
subjectCode = subjects$x
subjectID = subjects$X
# Get summary of fit object amd rhats as matrix, each rhat[[i]] entry is one dataset/model
params = summary(meta_fit)$summary
rhat[[j]] = params[,"Rhat"]
sumrhats[j] = sum(rhat[[j]] > 1.1)
j=j+1
# Extract out subject specific parameter estimates and Rhats () for each model type
k1_sd = NA
m_sd = NA
w_sd = NA
gamma_sd = NA
for (i in 1:length(subjectID)) {
tempInd = paste("k1[", subjectID[i], "]", sep="")
k1_sd[i] = params[tempInd,3]
tempInd = paste("m[", subjectID[i], "]", sep="")
m_sd[i] = params[tempInd,3]
if (models[m] == 'weighted' | models[m] == 'weightedmapping' | models[m] == 'accweighted' | models[m] == 'accweightedmapping') {
tempInd = paste("w[", subjectID[i], "]", sep="")
w_sd[i] = params[tempInd,3]
}
if (models[m] == 'mapping' | models[m] == 'weightedmapping' | models[m] == 'accweightedmapping') {
tempInd = paste("gamma[", subjectID[i], "]", sep="")
gamma_sd[i] = params[tempInd,3]
}
}
# Write out subject level parameters as CSV for matlab
write.csv(k1_sd, paste(outputPath, "subParams_k1_sd_dataset", dataset, ".csv",sep=""))
write.csv(m_sd, paste(outputPath, "subParams_m_sd_dataset", dataset, ".csv",sep=""))
if (models[m] == 'weighted' | models[m] == 'weightedmapping' | models[m] == 'accweighted' | models[m] == 'accweightedmapping') {
write.csv(w_sd, paste(outputPath, "subParams_w_sd_dataset", dataset, ".csv",sep=""))
}
if (models[m] == 'mapping' | models[m] == 'weightedmapping' | models[m] == 'accweightedmapping') {
write.csv(gamma_sd, paste(outputPath, "subParams_gamma_sd_dataset", dataset, ".csv",sep=""))
}
for (m in 1:length(models)) {
if (d == 1) {
dataset = 2
} else {
dataset = 3
}
outputPath <- paste(baseDir, models[m], "/", sep="")
# Load fitted model
load(paste(outputPath, "fitObject_group", dataset, ".RData", sep=""))
# Load vector of fitted subject IDs
subjects = read.csv(paste(outputPath, "subParams_subjects_dataset", dataset, ".csv",sep=""))
subjectCode = subjects$x
subjectID = subjects$X
# Get summary of fit object amd rhats as matrix, each rhat[[i]] entry is one dataset/model
params = summary(meta_fit)$summary
rhat[[j]] = params[,"Rhat"]
sumrhats[j] = sum(rhat[[j]] > 1.1)
j=j+1
# Extract out subject specific parameter estimates and Rhats () for each model type
k1_sd = NA
m_sd = NA
w_sd = NA
gamma_sd = NA
for (i in 1:length(subjectID)) {
tempInd = paste("k1[", subjectID[i], "]", sep="")
k1_sd[i] = params[tempInd,3]
tempInd = paste("m[", subjectID[i], "]", sep="")
m_sd[i] = params[tempInd,3]
if (models[m] == 'weighted' | models[m] == 'weightedmapping' | models[m] == 'accweighted' | models[m] == 'accweightedmapping') {
tempInd = paste("w[", subjectID[i], "]", sep="")
w_sd[i] = params[tempInd,3]
}
if (models[m] == 'mapping' | models[m] == 'weightedmapping' | models[m] == 'accweightedmapping') {
tempInd = paste("gamma[", subjectID[i], "]", sep="")
gamma_sd[i] = params[tempInd,3]
}
}
# Write out subject level parameters as CSV for matlab
write.csv(k1_sd, paste(outputPath, "subParams_k1_sd_dataset", dataset, ".csv",sep=""))
write.csv(m_sd, paste(outputPath, "subParams_m_sd_dataset", dataset, ".csv",sep=""))
if (models[m] == 'weighted' | models[m] == 'weightedmapping' | models[m] == 'accweighted' | models[m] == 'accweightedmapping') {
write.csv(w_sd, paste(outputPath, "subParams_w_sd_dataset", dataset, ".csv",sep=""))
}
if (models[m] == 'mapping' | models[m] == 'weightedmapping' | models[m] == 'accweightedmapping') {
write.csv(gamma_sd, paste(outputPath, "subParams_gamma_sd_dataset", dataset, ".csv",sep=""))
}
}
rhats
sumrhats
rhat[[j]]
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits_alt/weightedmapping/fitObject_group3.RData")
launch_shinystan(meta_fit)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits_alt/weightedmapping/fitObject_group3.RData")
launch_shinystan(meta_fit)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/weightedmapping/fitObject_group2.RData")
launch_shinystan(meta_fit)
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
sumrhats
sumrhats[[4]]
sumrhats[[8]]
rhat[[8]]
rhat[[9]]
rhat[[10]]
rhat[[11]]
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
sumrhats
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
sumrhats
sumrhats
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/ideal_noise/fitObject_group3.RData")
meta_fit
launch_shinystan(meta_fit)
require(rstan)
require(shinystan)
launch_shinystan(meta_fit)
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
params
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
params[,"n_eff"]
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
n_eff
n_eff[[1]]
n_eff[[2]]
n_eff[[3]]
n_eff[[4]]
n_eff[[5]]
n_eff[[6]]
n_eff[[7]]
n_eff[[8]]
n_eff[[4]]
install.packages("lavaan")
install.packages("reshape2")
library(lavaan)
library(ggplot2)
library(reshape2)
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
QSRdata = data[data$Group == 2, ]
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
QSRdata = data[data$Group == 2, ]
# PERCEPTUAL METACOGNITION
#Fit the multiple indicator Univariate Latent Change Score model to perception QSR scores (trained stimulus only)
percept_MILCS<-'
QSR_T2_P_T ~ 1*QSR_T1_P_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*QSR_T2_P_T     # Fixed regression of dCOG1 on COG_T2
QSR_T2_P_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
QSR_T2_P_T ~~ 0*QSR_T2_P_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
QSR_T1_P_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
QSR_T1_P_T ~~ QSR_T1_P_T    # This estimates the variance of COG_T1
dM ~ QSR_T1_P_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_MILCS, data=QSRdata, estimator='mlr',fixed.x=FALSE,missing='fiml')
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
library(lavaan)
library(ggplot2)
library(reshape2)
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
# UNIVARIATE MODELS
#Fit the multiple indicator Univariate Latent Change Score model to trained stimulus only:
percept_ULCS<-'
T2_P_T ~ 1*T1_P_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_P_T     # Fixed regression of dCOG1 on COG_T2
T2_P_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_P_T ~~ 0*T2_P_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_P_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_P_T ~~ T1_P_T    # This estimates the variance of COG_T1
dM ~ T1_P_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_ULCS, data=QSRdata, estimator='mlr',fixed.x=FALSE,missing='fiml')
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
memory_ULCS<-'
T2_M_T ~ 1*T1_M_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_M_T     # Fixed regression of dCOG1 on COG_T2
T2_M_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_M_T ~~ 0*T2_M_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_M_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_M_T ~~ T1_M_T    # This estimates the variance of COG_T1
dM ~ T1_M_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(memory_ULCS, data=QSRdata, estimator='mlr',fixed.x=FALSE,missing='fiml')
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
data
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
# UNIVARIATE MODELS
#Fit the multiple indicator Univariate Latent Change Score model to trained stimulus only:
percept_ULCS<-'
T2_P_T ~ 1*T1_P_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_P_T     # Fixed regression of dCOG1 on COG_T2
T2_P_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_P_T ~~ 0*T2_P_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_P_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_P_T ~~ T1_P_T    # This estimates the variance of COG_T1
dM ~ T1_P_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
memory_ULCS<-'
T2_M_T ~ 1*T1_M_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_M_T     # Fixed regression of dCOG1 on COG_T2
T2_M_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_M_T ~~ 0*T2_M_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_M_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_M_T ~~ T1_M_T    # This estimates the variance of COG_T1
dM ~ T1_M_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(memory_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
data
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
# UNIVARIATE MODELS
#Fit the multiple indicator Univariate Latent Change Score model to trained stimulus only:
percept_ULCS<-'
T2_Per_T ~ 1*T1_Per_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Per_T     # Fixed regression of dCOG1 on COG_T2
T2_Per_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Per_T ~~ 0*T2_Per_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Per_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Per_T ~~ T1_Per_T    # This estimates the variance of COG_T1
dM ~ T1_Per_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
memory_ULCS<-'
T2_Mem_T ~ 1*T1_Mem_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Mem_T     # Fixed regression of dCOG1 on COG_T2
T2_Mem_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Mem_T ~~ 0*T2_Mem_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Mem_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Mem_T ~~ T1_Mem_T    # This estimates the variance of COG_T1
dM ~ T1_Mem_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(memory_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
data
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
# UNIVARIATE MODELS
#Fit the multiple indicator Univariate Latent Change Score model to trained stimulus only:
percept_ULCS<-'
T2_Per_T ~ 1*T1_Per_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Per_T     # Fixed regression of dCOG1 on COG_T2
T2_Per_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Per_T ~~ 0*T2_Per_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Per_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Per_T ~~ T1_Per_T    # This estimates the variance of COG_T1
dM ~ T1_Per_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
memory_ULCS<-'
T2_Mem_T ~ 1*T1_Mem_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Mem_T     # Fixed regression of dCOG1 on COG_T2
T2_Mem_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Mem_T ~~ 0*T2_Mem_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Mem_T ~  1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Mem_T ~~ T1_Mem_T    # This estimates the variance of COG_T1
dM ~ T1_Mem_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(memory_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
library(lavaan)
library(ggplot2)
library(reshape2)
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
# UNIVARIATE MODELS
#Fit the multiple indicator Univariate Latent Change Score model to trained stimulus only:
percept_ULCS<-'
T2_Per_T ~ 1*T1_Per_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Per_T     # Fixed regression of dCOG1 on COG_T2
T2_Per_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Per_T ~~ 0*T2_Per_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Per_T ~  c(base,base)*1            # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Per_T ~~ T1_Per_T    # This estimates the variance of COG_T1
dM ~ T1_Per_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
memory_ULCS<-'
T2_Mem_T ~ 1*T1_Mem_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Mem_T     # Fixed regression of dCOG1 on COG_T2
T2_Mem_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Mem_T ~~ 0*T2_Mem_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Mem_T ~  c(base,base)*1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Mem_T ~~ T1_Mem_T    # This estimates the variance of COG_T1
dM ~ T1_Mem_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(memory_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
library(lavaan)
library(ggplot2)
library(reshape2)
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
# UNIVARIATE MODELS
#Fit the multiple indicator Univariate Latent Change Score model to trained stimulus only:
percept_ULCS<-'
T2_Per_T ~ 1*T1_Per_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Per_T     # Fixed regression of dCOG1 on COG_T2
T2_Per_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Per_T ~~ 0*T2_Per_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Per_T ~  c(base,base)*1            # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Per_T ~~ c(var,var)*T1_Per_T    # This estimates the variance of COG_T1
dM ~ T1_Per_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
memory_ULCS<-'
T2_Mem_T ~ 1*T1_Mem_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Mem_T     # Fixed regression of dCOG1 on COG_T2
T2_Mem_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Mem_T ~~ 0*T2_Mem_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Mem_T ~  c(base,base)*1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Mem_T ~~ c(var,var)*T1_Mem_T    # This estimates the variance of COG_T1
dM ~ T1_Mem_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(memory_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
data
data$Group[data$Group == 1] = "Control"
data$Group
data$Group[data$Group == 2] = "Experimental"
library(lavaan)
library(ggplot2)
library(reshape2)
# Load QSR data from CSV
data = read.csv("~/Dropbox/MetaLab/Jason/meta_d training data analysis/Online Behavioral Study/Figures/JASP/data/TxDxS_QSR_bothGroups_61subs.csv")
data$Group[data$Group == 1] = "Control"
data$Group[data$Group == 2] = "Experimental"
# UNIVARIATE MODELS
#Fit the multiple indicator Univariate Latent Change Score model to trained stimulus only:
percept_ULCS<-'
T2_Per_T ~ 1*T1_Per_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Per_T     # Fixed regression of dCOG1 on COG_T2
T2_Per_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Per_T ~~ 0*T2_Per_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Per_T ~  c(base,base)*1            # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Per_T ~~ c(var,var)*T1_Per_T    # This estimates the variance of COG_T1
dM ~ T1_Per_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(percept_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
memory_ULCS<-'
T2_Mem_T ~ 1*T1_Mem_T     # Fixed regression of COG_T2 on COG_T1
dM =~ 1*T2_Mem_T     # Fixed regression of dCOG1 on COG_T2
T2_Mem_T ~ 0*1          # This line constrains the intercept of COG_T2 to 0
T2_Mem_T ~~ 0*T2_Mem_T    # This fixes the variance of the COG_T2 to 0
dM ~ 1             # This estimates the intercept of the change scores
T1_Mem_T ~  c(base,base)*1           # This estimates the intercept of COG_T1
dM ~~  dM       # This estimates the variance of the change scores
T1_Mem_T ~~ c(var,var)*T1_Mem_T    # This estimates the variance of COG_T1
dM ~ T1_Mem_T          # This estimates the self-feedback parameter
'
fitMILCS <- lavaan(memory_ULCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitMILCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
BLCS<-'
T2_Per_T ~ 1*T1_Per_T     # This parameter regresses COG_T2 perfectly on COG_T1
dMP =~ 1*T2_Per_T     # This defines the latent change score factor as measured perfectly by scores on COG_T2
dMP ~ 1             # This estimates the intercept of the change score
T1_Per_T ~  c(baseP,baseP)*1           # This estimates the intercept of COG_T1
T2_Per_T ~ 0*1          # This constrains the intercept of COG_T2 to 0
T2_Per_T ~~ 0*T2_Per_T    # This fixes the variance of the COG_T2 to 0
T2_Mem_T ~ 1*T1_Mem_T     # This parameter regresses NEU_T2 perfectly on NEU_T1
dMM =~ 1*T2_Mem_T     # This defines the latent change score factor as measured perfectly by scores on NEU_T2
dMM ~ 1             # This estimates the intercept of the change score
T1_Mem_T ~ c(baseM,baseM)*1            # This estimates the intercept of NEU_T1
T2_Mem_T ~ 0*1          # This line constrains the intercept of NEU_T2 to 0
T2_Mem_T ~~ 0*T2_Mem_T    # This fixes the variance of the NEU_T2 to 0
dMP ~~  dMP       # This estimates the variance of the change scores
dMM ~~ dMM        # This estimates the variance of the change scores
T1_Per_T ~~ c(varP,varP)*T1_Per_T    # This estimates the variance of the COG_T1
T1_Mem_T ~~ c(varM,varM)*T1_Mem_T      # This estimates the variance of NEU_T1
dMM ~ T1_Per_T + T1_Mem_T   # This estimates the COG to NEU coupling parameter and the COG to COG self-feedback
dMP ~ T1_Mem_T + T1_Per_T   # This estimates the NEU to COG coupling parameter and the NEU to NEU self-feedback
T1_Per_T ~~  c(covPM, covPM)*T1_Mem_T     # This estimates the COG_T1 NEU_T1 covariance
dMP ~~ dMM          # This estimates the dCOG and dNEU covariance
'
fitBLCS <- lavaan(BLCS, data=data, estimator='mlr',fixed.x=FALSE,missing='fiml',group="Group")
summary(fitBLCS, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
rm(list=ls())
source('~/Dropbox/MetaLab/Jason/meta_d training data analysis/LatentChangeAnalysis/meta_univariate_LCS.R')
source('~/Dropbox/MetaLab/Jason/meta_d training data analysis/LatentChangeAnalysis/meta_univariate_LCS.R')
source('~/Dropbox/MetaLab/Jason/meta_d training data analysis/LatentChangeAnalysis/meta_univariate_LCS.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_indiv.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_indiv.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_indiv.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_indiv.R')
subjects
subjects[23]
subjects[22]
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_indiv.R')
