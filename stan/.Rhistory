quit
quit()
q()
install.packages("stargazer")
stargazer(attitude)
require(stargazer)
stargazer(attitude)
a = data.frame(c(1,2,3,4), c(1,2,3,4))
a
cor(a)
plot(cor(a))
source('~/Dropbox/MetaLab/Tricia/VC Expt/Ver 2/VC_analysis.R')
summary(youAccModel)
fulldata$gender
sum(fulldata$gender)
fulldata = data.frame(fdata$subject[,,1]$allsub[,,1]$data)
colnames(fulldata) <- c("subjid" ,"persp" ,"ava" ,"stimLR", "target" ,"keypres","rt","correct" ,"SDT" , "age", "gender")
fulldata = data.frame(fdata$subject[,,1]$allsub[,,1]$data)
colnames(fulldata) <- c("subjid" ,"persp" ,"ava" ,"stimLR", "target" ,"keypres","rt","correct" ,"SDT" , "age", "gender")
sum(fulldata$gender)
youAccModel <- lmer(correct ~ congru*gender + (1 + congru*gender |subjid), data = youdata_present, family="binomial")
summary(youAccModel)
fulldata = data.frame(fdata$subject[,,1]$allsub[,,1]$data)
# Column codes are: "persp=you/him" ,"ava=left/right" ,"stim=left/right", "target=pres/abs", "SDT=H/F/M/C"
colnames(fulldata) <- c("subjid" ,"persp" ,"ava" ,"stimLR", "target" ,"keypres","rt","correct" ,"SDT" , "age", "gender")
fulldata$congru <- fulldata$ava == fulldata$stimLR # NB this only makes sense on present trials
fulldata$subjid <- factor(fulldata$subjid)
fulldata$persp <- factor(fulldata$persp)
fulldata$ava <- factor(fulldata$ava)
fulldata$stimLR <- factor(fulldata$stimLR)
fulldata$target <- factor(fulldata$target)
fulldata$correct <- factor(fulldata$correct)
fulldata$SDT <- factor(fulldata$SDT)
fulldata$congru <- factor(fulldata$congru)
fulldata$gender <- factor(fulldata$gender)
youdata_present <- fulldata[fulldata$persp == 1 & fulldata$target == 1 & fulldata$gender == 0, ]
youAccModel <- lmer(correct ~ congru + (1 + congru |subjid), data = youdata_present, family="binomial")
summary(youAccModel)
youdata_present <- fulldata[fulldata$persp == 1 & fulldata$target == 1 & fulldata$gender == 1, ]
youAccModel <- lmer(correct ~ congru + (1 + congru |subjid), data = youdata_present, family="binomial")
summary(youAccModel)
library("car")
help(Anova)
q()
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(rnorm(100, mean = 5, sd = 3))
shapiro.test(rnorm(10000, mean = 5, sd = 3))
shapiro.test(rnorm(1000, mean = 5, sd = 3))
shapiro.test(runif(1000, min = 2, max = 4))
quit()
pow(2)
2^2
90^0.88
90^2
90^1.5
90^1.1
help(sflist2stanfit)
require(rstan)
update.packages("rstan")
require(rstan)
version(rstan)
version rstan
%paste
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
quit
require(rstan)
require(rstan)
require(shinystan)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/accweighted/fitParams_group3.RData")
print(meta_fit)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/accweighted/fitObject_group3.RData")
print(meta_fit)
log_lik <- extract_log_lik(meta_fit)
require(loo)
log_lik <- extract_log_lik(meta_fit)
log_lik
loo(log_lik)
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/ideal/fitObject_group3.RData")
log_lik <- extract_log_lik(meta_fit)
loo(log_lik)
waic(log_lik)
log_lik
load("~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/modelfits/ideal/fitObject_group2.RData")
edit(extract_log_lik())
edit(extract_log_lik
)
log_lik_conf = as.matrix(meta_fit, "log_lik_conf")
meta_fit
log_lik = extract_log_lik(meta_fit)
log_lik
loo(log_lik)
waic(log_lik)
meta_fit
outputPath <- paste(baseDir, models[m], "/", sep="")
rm(list=ls())
baseDir = "~/Dropbox/Research/Metacognition/stateactionexpt/analysis/stan/modelfits/"
models = c('ideal', 'weighted', 'accweighted', 'mapping', 'weightedmapping', 'accweightedmapping') # selection from: ideal, weighted, accweighted, mapping, weightedmapping, accweightedmapping
# Loop over and load models, write out variance parameters
m = 1
d = 1
if (d == 1) {
dataset = 2
} else {
dataset = 3
}
outputPath <- paste(baseDir, models[m], "/", sep="")
load(paste(outputPath, "fitObject_group", d, ".RData", sep=""))
load(paste(outputPath, "fitObject_group", dataset, ".RData", sep=""))
meta_fit
print(meta_fit)
summary(meta_fit)$summary
summary(meta_fit)$summary["k1"]
summary(meta_fit)$summary[,"k1"]
summary(meta_fit)$summary[,"mu_k1"]
summary(meta_fit)$summary
summary(meta_fit)$summary[,"Rhats"]
summary(meta_fit)$summary[,"Rhat"]
summary(meta_fit)$summary["mu_k1",]
summary(meta_fit)$summary["k1[1]",]
paste("k1[", 1, "]", sep="")
paste("k1[", dataset, "]", sep="")
temp = past("k1[", dataset, "]", sep="")
temp = paste("k1[", dataset, "]", sep="")
temp
summary(meta_fit)$summary[temp,]
params = summary(meta_fit)$summary
params
meta_fit
help(load.csv)
help(write.csv)
read.csv(paste(outputPath, "subParams_subjects_dataset", dataset, ".csv",sep=""))
subjects =   write.csv(subjects, paste(outputPath, "subParams_subjects_dataset", dataset, ".csv",sep=""))
subjects = read.csv(paste(outputPath, "subParams_subjects_dataset", dataset, ".csv",sep=""))
subjects
subject$X
subjects$X
subjects$x
m = 1
d = 1
if (d == 1) {
dataset = 2
} else {
dataset = 3
}
outputPath <- paste(baseDir, models[m], "/", sep="")
# Load fitted model
load(paste(outputPath, "fitObject_group", dataset, ".RData", sep=""))
# Load vector of fitted subject IDs
subjects = read.csv(paste(outputPath, "subParams_subjects_dataset", dataset, ".csv",sep=""))
subjectCode = subjects$x
subjectID = subjects$X
# Get summary of fit object as matrix
params = summary(meta_fit)$summary
params
# Extract out subject specific parameter estimates for each model type
k1_sd = NA
m_sd = NA
w_sd = NA
gamma_sd = NA
for (i in 1:length(subjectID)) {
tempInd = paste("k1[", subjectID[i], "]", sep="")
k1_sd[i] = params[tempInd,3]
tempInd = paste("m[", subjectID[i], "]", sep="")
m_sd[i] = params[tempInd,3]
if (models[m] == 'weighted' | models[m] == 'weightedmapping' | models[m] == 'accweighted' | models[m] == 'accweightedmapping') {
tempInd = paste("w[", subjectID[i], "]", sep="")
w_sd[i] = params[tempInd,3]
}
if (models[m] == 'mapping' | models[m] == 'weightedmapping' | models[m] == 'accweightedmapping') {
tempInd = paste("gamma[", subjectID[i], "]", sep="")
gamma_sd[i] = params[tempInd,3]
}
}
k1_sd
m_sd
gamma
gamma_sd
w_sd
# Write out subject level parameters as CSV for matlab
write.csv(k1_sd, paste(outputPath, "subParams_k1_sd_dataset", dataset, ".csv",sep=""))
write.csv(m_sd, paste(outputPath, "subParams_m_sd_dataset", dataset, ".csv",sep=""))
if (models[m] == 'weighted' | models[m] == 'weightedmapping' | models[m] == 'accweighted' | models[m] == 'accweightedmapping') {
write.csv(w_sd, paste(outputPath, "subParams_w_sd_dataset", dataset, ".csv",sep=""))
}
if (models[m] == 'mapping' | models[m] == 'weightedmapping' | models[m] == 'accweightedmapping') {
write.csv(gamma_sd, paste(outputPath, "subParams_gamma_sd_dataset", dataset, ".csv",sep=""))
}
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
rm(list=ls())
baseDir = "~/Dropbox/Research/Metacognition/stateactionexpt/analysis/stan/modelfits/"
models = c('ideal', 'weighted', 'accweighted', 'mapping', 'weightedmapping', 'accweightedmapping') # selection from: ideal, weighted, accweighted, mapping, weightedmapping, accweightedmapping
# Loop over and load models, write out variance parameters
m=1
d=1
outputPath <- paste(baseDir, models[m], "/", sep="")
load(paste(outputPath, "fitObject_group", dataset, ".RData", sep=""))
if (d == 1) {
dataset = 2
} else {
dataset = 3
}
outputPath <- paste(baseDir, models[m], "/", sep="")
load(paste(outputPath, "fitObject_group", dataset, ".RData", sep=""))
# Load vector of fitted subject IDs
subjects = read.csv(paste(outputPath, "subParams_subjects_dataset", dataset, ".csv",sep=""))
subjectCode = subjects$x
subjectID = subjects$X
params = summary(meta_fit)$summary
params
params[,3:end]
params[,-3]
params[-1,]
rhat = params[,"Rhat"]
rhat
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
rhat
j
params[,"Rhat"]
rhat[j, ] = params[,"Rhat"]
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
rhat
rhat <- matrix(list(), 2, 2)
rhat
rhat <- matrix(list(), 1, 12)
rhat
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
rhat
rhat[[1]]
rhat[[2]]
rhat[[3]]
rhat[[4]]
rhat[[5]]
rhat[[6]]
rhat[[7]]
rhat[[6]]
rhat[[5]]
rhat[[7]]
rhat[[8]]
rhat[[9]]
rhat[[10]]
rhat[[11]]
rhat[[12]]
source('~/Dropbox/Research/Metacognition/stateActionExpt/mri_analysis/meta_ROI_regression_post.R')
rm(list=ls())
require(R.matlab)
require(rstan)
require(shinystan)
require(parallel)
require(loo)
source('~/Dropbox/Utils/stan/stanUtilities.R')
baseDir = "~/Dropbox/Research/Metacognition/stateactionexpt/analysis/stan/modelfits/"
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
models = c('ideal_noise') # selection from: ideal, weighted, accweighted, mapping, weightedmapping, accweightedmapping
# dataset = readline(prompt = "Dataset? 1=behav pilot, 2=behav, 3=fmri ")
dataset = 3
if (dataset == "1") {
dataDir = "~/Dropbox/Research/Metacognition/stateactionexpt/task/locData/"
filePrefix = "locData_sub_"
suffix = ""
subjects = seq(3,17)
Ntrials <- 900
} else if (dataset == "2") {
dataDir = "~/Dropbox/Research/Metacognition/stateactionexpt/task/locFullData/"
filePrefix = "fMRI_pilotData_sub_"
suffix = ""
subjects = c(seq(12,28), seq(30,37))
Ntrials <- 900
} else {
dataDir = "~/Dropbox/Research/Metacognition/stateactionexpt/task/locFullData/"
filePrefix = "fMRI_pilotData_sub_"
suffix = "_fMRI"
subjects =c(seq(12,19), seq(23,28), seq(30,37))
# subjects = c(seq(12,14), seq(16,19), seq(23,25), 27, 28, seq(30, 37))
Ntrials <- 360
}
Nchains <- 3
Niter <- 3000
Nburn <- 1000
# GET DATA
a_matrix <- matrix(0, length(subjects), Ntrials)
d_matrix <- matrix(0, length(subjects), Ntrials)
conf_matrix <- matrix(0, length(subjects), Ntrials)
theta1_matrix <- matrix(0, length(subjects), Ntrials)
theta2_matrix <- matrix(0, length(subjects), Ntrials)
allCoh = matrix(0, length(subjects), 3)
for (subi in 1:length(subjects)){
## EXTRACT DATA FILE
setwd(dataDir)
DATA = readMat(paste(filePrefix,subjects[subi],suffix,'_2.mat',sep=""))
dat = DATA$locDATA
precoh = NULL
precoh_index = NULL
postcoh = NULL
postcoh_index = NULL
conf = NULL
response = NULL
dir = NULL
precoh = dat[,,1]$dots.coherence[1,]
postcoh = dat[,,1]$post.coherence[1,]
conf = dat[,,1]$mouse.response[1,]
response = dat[,,1]$button.response[1,] - 1
dir = dat[,,1]$dots.direction[1,]/360
dir[dir == 0.5] = -1
a_matrix[subi,] <- response
d_matrix[subi,] <- dir
conf_matrix[subi,] <- conf
theta1_matrix[subi,] <- precoh
theta2_matrix[subi,] <- postcoh
allCoh[subi,] <- unique(precoh)
}
## Handle ragged matrices due to missed trials (only an issue for fMRI data)
goodTrials <- NA
for (subi in 1:length(subjects)) {
missed <- conf_matrix[subi,] == "NaN"
goodTrials[subi] <- Ntrials - sum(missed)
a_matrix[subi,] <- c(a_matrix[subi,!missed], rep(0,sum(missed)))
d_matrix[subi,] <- c(d_matrix[subi,!missed], rep(0,sum(missed)))
conf_matrix[subi,] <- c(conf_matrix[subi,!missed], rep(0,sum(missed)))
theta1_matrix[subi,] <- c(theta1_matrix[subi,!missed], rep(0,sum(missed)))
theta2_matrix[subi,] <- c(theta2_matrix[subi,!missed], rep(0,sum(missed)))
}
m=1
setwd("~/Dropbox/Research/Metacognition/stateactionexpt/analysis/stan/")
outputPath <- paste(baseDir, models[m], "/", sep="")
data <- list(Ns=length(subjects), N=Ntrials, ST=goodTrials, a=a_matrix, d=d_matrix, conf=conf_matrix, theta1=theta1_matrix, theta2=theta2_matrix, coh=allCoh)
# Fit model
seed <- 12345
# Compile model object
# Fit model
seed <- 12345
# Compile and initialize parameter values
if (models[m] == 'ideal') {
parameters <- c("mu_k1", "sd_k1", "k1", "mu_m", "sd_m", "m","log_lik")
group_param <- c("mu_k1", "sd_k1","mu_m","sd_m")
} else if (models[m] == 'ideal_noise') {
parameters <- c("mu_k1", "sd_k1", "k1", "mu_m", "sd_m", "m", "sigma_conf", "mu_sigma_conf", "sd_sigma_conf", "log_lik")
group_param <- c("mu_k1", "sd_k1","mu_m","sd_m", "mu_sigma_conf", "sd_sigma_conf")
} else if (models[m] == 'weighted' || models[m] == 'accweighted') {
parameters <- c("mu_k1", "sd_k1", "k1", "mu_m", "sd_m", "m", "alpha_w", "beta_w", "w", "log_lik")
group_param <- c("mu_k1", "sd_k1", "mu_m", "sd_m", "alpha_w", "beta_w")
} else if (models[m] == 'mapping') {
parameters <- c("mu_k1", "sd_k1", "k1", "mu_m", "sd_m", "m", "sd_gamma", "mu_gamma", "gamma", "log_lik")
group_param <- c("mu_k1", "sd_k1", "mu_m", "sd_m", "sd_gamma", "mu_gamma")
} else if (models[m] == 'weightedmapping' || models[m] == 'accweightedmapping') {
parameters <- c("mu_k1", "sd_k1", "k1", "mu_m", "sd_m", "m", "alpha_w", "beta_w", "w", "sd_gamma", "mu_gamma", "gamma", "log_lik")
group_param <- c("mu_k1", "sd_k1", "mu_m", "sd_m", "alpha_w", "beta_w", "sd_gamma", "mu_gamma")
}
models[m]
# Compile and run
meta_fit <- stan(paste("metaConf_fit_group_",models[m],'.stan',sep=""), seed = seed,data = data, pars = parameters, warmup = Nburn, iter = Niter, chains = Nchains)
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_extractParams.R')
sumrhats
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
meta_fit
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
meta_fit
launch_shinystan(meta_fit)
rstan:::rstudio_stanc("metaConf_fit_group_ideal_noise.stan")
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
meta_fit
rstan:::rstudio_stanc("metaConf_fit_group_ideal_noise.stan")
rstan:::rstudio_stanc("metaConf_fit_group_ideal_noise.stan")
rstan:::rstudio_stanc("metaConf_fit_group_ideal.stan")
rstan:::rstudio_stanc("metaConf_fit_group_ideal.stan")
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
rstan:::rstudio_stanc("metaConf_fit_group_ideal_noise.stan")
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
source('~/Dropbox/Research/Metacognition/stateActionExpt/analysis/stan/stan_metaConf_group.R')
quit()
